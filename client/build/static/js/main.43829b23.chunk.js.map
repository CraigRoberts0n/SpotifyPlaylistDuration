{"version":3,"sources":["Components/helper/MilliToMinute.js","Components/Header.jsx","Components/Sidebar.jsx","Components/PlaylistDialog.jsx","Components/AppActions.jsx","Components/Landing.jsx","Components/SongCard.jsx","Components/SongCards.jsx","Components/helper/hash.js","App.js","serviceWorker.js","index.js"],"names":["millisToMinutesAndSeconds","millis","minutes","Math","floor","seconds","toFixed","Header","setDrawerOpen","checkedSongs","userID","flag","classes","makeStyles","theme","toolbar","minHeight","alignItems","paddingTop","title","flexGrow","alignSelf","totalDuration","justifyContent","fontSize","breakpoints","down","appBar","backgroundColor","useStyles","AppBar","position","style","Toolbar","className","IconButton","edge","menuButton","color","aria-label","onClick","Typography","variant","countryCode","svg","length","reduce","acc","duration","Sidebar","drawerOpen","setCheckedSongs","Drawer","anchor","open","onClose","Divider","List","minWidth","marginLeft","subheader","ListSubheader","map","song","ListItem","button","key","id","name","event","checkedSongsCopy","removeIndex","item","indexOf","target","getAttribute","splice","deleteSelectedItem","ListItemAvatar","pointerEvents","Avatar","alt","songName","src","albumCover","ListItemText","primary","secondary","artist","Button","deleteAllItems","Link","href","PlaylistDialog","token","setAppErrorMessage","useState","setOpen","playlistName","setPlaylistName","playlistDescription","setPlaylistDescription","playlistPublic","setPlaylistPublic","errorMessage","setErrorMessage","handleClose","postPlaylistWithItems","playlistSettings","axios","post","headers","Authorization","then","response","console","log","data","uris","uri","message","catch","error","marginBottom","Dialog","aria-labelledby","Alert","severity","DialogTitle","DialogContent","TextField","autoFocus","margin","label","type","fullWidth","onChange","e","value","FormControlLabel","control","Checkbox","checked","inputProps","labelPlacement","DialogActions","description","public","AppActions","searchResults","setSearchResults","searchQuery","setSearchQuery","Grid","container","padding","xs","md","size","marginTop","height","get","items","tracks","searchForSong","Address","window","location","split","redirectUri","scopes","Landing","backgroundImage","backgroundClip","gutterBottom","fontWeight","component","paddingBottom","join","display","SongCard","identifier","setChecked","useEffect","some","handleChange","checkStatus","songObj","concatCheckedSongs","concat","Card","CardActionArea","CardMedia","image","CardContent","SongCards","userLibrary","loadMoreLibrary","spacing","justify","artists","album","images","url","duration_ms","track","hash","substring","initial","parts","decodeURIComponent","App","setToken","setUserID","setFlag","setUserLibrary","loadMoreURL","setLoadMoreURL","appErrorMessage","_token","access_token","localStore","JSON","parse","localStorage","getItem","setItem","stringify","getUserDetails","getLibrary","country","URL","next","concatLibrary","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.43829b23.chunk.js","sourcesContent":["//Method to convert Milliseconds into Minutes & Seconds\r\n//https://stackoverflow.com/questions/21294302/converting-milliseconds-to-minutes-and-seconds-with-javascript\r\nconst millisToMinutesAndSeconds = (millis) => {\r\n  var minutes = Math.floor(millis / 60000);\r\n  var seconds = ((millis % 60000) / 1000).toFixed(0);\r\n  return seconds === 60\r\n    ? minutes + 1 + \":00\"\r\n    : minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\r\n};\r\n\r\nexport default millisToMinutesAndSeconds;\r\n","import React from \"react\";\r\n\r\n//Import method\r\nimport millisToMinutesAndSeconds from \"./helper/MilliToMinute\";\r\n\r\n//Import CountryFlag Generator\r\nimport ReactCountryFlag from \"react-country-flag\";\r\n\r\n//Material-ui Components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nconst Header = ({ setDrawerOpen, checkedSongs, userID, flag }) => {\r\n  //initialize styles\r\n  const useStyles = makeStyles((theme) => ({\r\n    toolbar: {\r\n      minHeight: \"7vh\",\r\n      alignItems: \"flex-start\",\r\n      paddingTop: \"1vh\",\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      alignSelf: \"flex-start\",\r\n    },\r\n    totalDuration: {\r\n      justifyContent: \"center\",\r\n      fontSize: \"1.7rem\",\r\n      [theme.breakpoints.down(\"xs\")]: {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n    appBar: {\r\n      backgroundColor: \"#1DB954\",\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar position=\"sticky\" style={{ backgroundColor: \"#1DB954\" }}>\r\n      <Toolbar className={classes.toolbar}>\r\n        {/* {Hamburger Button} */}\r\n        <IconButton\r\n          edge=\"start\"\r\n          className={classes.menuButton}\r\n          color=\"inherit\"\r\n          aria-label=\"open drawer\"\r\n          onClick={() => setDrawerOpen(true)}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n\r\n        <Typography className={classes.title} variant=\"h5\">\r\n          {/* {Display Username and Flag} */}\r\n          {userID} {flag && <ReactCountryFlag countryCode={flag} svg />}\r\n        </Typography>\r\n        <Typography className={classes.totalDuration} variant=\"h4\">\r\n          {/* {Display the Total Playlist Duartion} */}\r\n          {checkedSongs.length > 0 &&\r\n            \"Duration: \" +\r\n              millisToMinutesAndSeconds(\r\n                checkedSongs.reduce((acc, { duration }) => acc + duration, 0)\r\n              )}\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\n//Material-ui Components\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst Sidebar = ({\r\n  drawerOpen,\r\n  setDrawerOpen,\r\n  checkedSongs,\r\n  setCheckedSongs,\r\n}) => {\r\n  //Method to delete the Selected Song from CheckedSongs Array\r\n  const deleteSelectedItem = (event) => {\r\n    let checkedSongsCopy = [...checkedSongs]; //Copy Array\r\n    let removeIndex = checkedSongsCopy\r\n      .map((item) => item.id)\r\n      .indexOf(event.target.getAttribute(\"name\")); //Get index of song to remove\r\n    if (removeIndex >= 0) {\r\n      checkedSongsCopy.splice(removeIndex, 1); //remove song from array\r\n    }\r\n    setCheckedSongs(checkedSongsCopy); //Set CheckedSong State\r\n  };\r\n\r\n  const deleteAllItems = () => {\r\n    let checkedSongsCopy = [...checkedSongs]; //Copy Array\r\n    checkedSongsCopy.length = 0;\r\n    setCheckedSongs(checkedSongsCopy);\r\n  }\r\n\r\n  return (\r\n    <Drawer\r\n      anchor={\"left\"}\r\n      open={drawerOpen}\r\n      onClose={() => setDrawerOpen(false)}\r\n    >\r\n      <IconButton onClick={() => setDrawerOpen(false)}>\r\n        <ChevronLeftIcon />\r\n      </IconButton>\r\n      <Divider />\r\n      <List style={{ minWidth: \"auto\", marginLeft: 5 }} subheader={<li />}>\r\n        {checkedSongs.length > 0 && (\r\n          <ListSubheader>{\"Click song to delete\"}</ListSubheader>\r\n        )}\r\n        {checkedSongs.map((song) => (\r\n          // List Item Container\r\n          <ListItem\r\n            button\r\n            key={song.id}\r\n            name={song.id}\r\n            onClick={(event) => deleteSelectedItem(event)}\r\n          >\r\n            {/* {Song Avatar} */}\r\n            <ListItemAvatar style={{ pointerEvents: \"none\" }}>\r\n              <Avatar\r\n                alt={song.songName}\r\n                src={song.albumCover}\r\n                style={{ pointerEvents: \"none\" }}\r\n              />\r\n            </ListItemAvatar>\r\n            {/* {Song Name and Artist} */}\r\n            <ListItemText\r\n              primary={song.songName}\r\n              secondary={song.artist}\r\n              style={{ pointerEvents: \"none\" }}\r\n            />\r\n            {/* {Delete Icon} */}\r\n            <IconButton style={{ pointerEvents: \"none\" }}>\r\n              <DeleteIcon style={{ pointerEvents: \"none\" }} />\r\n            </IconButton>\r\n          </ListItem>\r\n        ))}\r\n        {/* {Display Default Text} */}\r\n        {checkedSongs.length === 0 && (\r\n          <ListItem>\r\n            <ListItemText primary=\"Select Songs to Begin\" />\r\n          </ListItem>\r\n        )}\r\n        <Divider />\r\n        {checkedSongs.length !== 0 && (\r\n          <>\r\n          <ListItem>\r\n            <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  onClick={() => {\r\n                    deleteAllItems();\r\n                  }}\r\n                >\r\n                  Remove all Songs\r\n              </Button>\r\n          </ListItem>\r\n          <Divider />\r\n          </>)}\r\n        {/* {GitHub Profile Link} */}\r\n        <ListItem>\r\n          <Link href=\"https://github.com/CraigRoberts0n\">\r\n            <ListItemText primary=\"Github: https://github.com/CraigRoberts0n\" />\r\n          </Link>\r\n        </ListItem>\r\n      </List>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, { useState } from \"react\";\r\n\r\n//For API calls\r\nimport axios from \"axios\";\r\n\r\n//Material-ui Components\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nconst PlaylistDialog = ({\r\n  checkedSongs,\r\n  token,\r\n  userID,\r\n  setAppErrorMessage,\r\n}) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [playlistName, setPlaylistName] = useState(\"\");\r\n  const [playlistDescription, setPlaylistDescription] = useState(\"\");\r\n  const [playlistPublic, setPlaylistPublic] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  //Handles the opening of Playlist modal\r\n  const handleClickOpen = () => {\r\n    if (checkedSongs.length === 0) {\r\n      setAppErrorMessage({\r\n        variant: \"error\",\r\n        message: \"Please Select Some Songs\",\r\n      });\r\n    } else {\r\n      setAppErrorMessage({ variant: \"\", message: \"\" });\r\n      setOpen(true);\r\n    }\r\n  };\r\n\r\n  //Handles the closing of Playlist modal\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  //Handles Toggle of Public Setting\r\n  const handleChange = (event) => {\r\n    setPlaylistPublic(event.target.checked);\r\n  };\r\n\r\n  //Handles the validation of the Modal form\r\n  const confirmPlaylist = () => {\r\n    if (!playlistName) {\r\n      setErrorMessage(\"Please give the playlist a name!\");\r\n    } else {\r\n      postPlaylistWithItems({\r\n        name: playlistName,\r\n        description: playlistDescription,\r\n        public: playlistPublic,\r\n      });\r\n    }\r\n  };\r\n\r\n  //Create the Playlist and populate with selected songs - POST\r\n  const postPlaylistWithItems = (playlistSettings) => {\r\n    axios\r\n      .post(\r\n        `https://api.spotify.com/v1/users/${userID}/playlists`,\r\n        playlistSettings,\r\n        {\r\n          headers: { Authorization: \"Bearer \" + token },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        //On successful playlist creation - populate playlist\r\n        console.log(response);\r\n        axios\r\n          .post(\r\n            `https://api.spotify.com/v1/playlists/${response.data.id}/tracks`,\r\n            {\r\n              uris: checkedSongs.map((song) => song.uri),\r\n            },\r\n            { headers: { Authorization: \"Bearer \" + token } }\r\n          )\r\n          .then((response) => {\r\n            console.log(response);\r\n            setOpen(false);\r\n            //Display Successful Creation Message\r\n            setAppErrorMessage({\r\n              variant: \"success\",\r\n              message: \"Playlist creation Success!\",\r\n            });\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        //Display an error message\r\n        setAppErrorMessage({\r\n          variant: \"error\",\r\n          message: `Playlist creation Failed: ${error.response.data.error.message}`,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginBottom: 6 }}>\r\n      {/* {Button to Open modal} */}\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Save to Playlist\r\n      </Button>\r\n\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        {/* {Display Error Message} */}\r\n        {errorMessage && <Alert severity=\"error\">{errorMessage}</Alert>}\r\n\r\n        {/* {Heading Text} */}\r\n        <DialogTitle id=\"form-dialog-title\">\r\n          Save Selected Items to a Playlist\r\n        </DialogTitle>\r\n\r\n        <DialogContent>\r\n          {/* {Playlist Name Input} */}\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"Playlist Name\"\r\n            type=\"text\"\r\n            fullWidth\r\n            onChange={(e) => setPlaylistName(e.target.value)}\r\n          />\r\n          {/* {Playlist Description Input} */}\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"description\"\r\n            label=\"Description\"\r\n            type=\"text\"\r\n            fullWidth\r\n            onChange={(e) => setPlaylistDescription(e.target.value)}\r\n          />\r\n          {/* {Playlist Public Checkbox} */}\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={playlistPublic}\r\n                onChange={handleChange}\r\n                inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n              />\r\n            }\r\n            label=\"Public?\"\r\n            labelPlacement=\"start\"\r\n            style={{ marginLeft: \"0px\" }}\r\n          />\r\n        </DialogContent>\r\n        {/* {Handles Cancel & SavePlaylist Buttons} */}\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={confirmPlaylist} color=\"primary\">\r\n            Save Playlist\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlaylistDialog;\r\n","import React from \"react\";\r\n\r\n//For API calls\r\nimport axios from \"axios\";\r\n\r\n//Import Component\r\nimport PlaylistDialog from \"./PlaylistDialog\";\r\n\r\n//Material-ui Components\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst AppActions = ({\r\n  token,\r\n  checkedSongs,\r\n  userID,\r\n  setAppErrorMessage,\r\n  setDrawerOpen,\r\n  searchResults,\r\n  setSearchResults,\r\n  searchQuery,\r\n  setSearchQuery,\r\n}) => {\r\n  //Search for Input query - GET\r\n  const searchForSong = (searchQuery) => {\r\n    //Validation\r\n    if (!searchQuery) {\r\n      setAppErrorMessage({\r\n        variant: \"error\",\r\n        message: \"Please supply search query\",\r\n      });\r\n      return;\r\n    }\r\n    axios\r\n      .get(`https://api.spotify.com/v1/search?q=${searchQuery}&type=track`, {\r\n        headers: { Authorization: \"Bearer \" + token },\r\n      })\r\n      .then(\r\n        ({\r\n          data: {\r\n            tracks: { items },\r\n          },\r\n        }) => {\r\n          setSearchResults(items); //Set Search Results State\r\n        }\r\n      )\r\n      .catch((error) => {\r\n        console.log(error.response); //console log error\r\n        //Display error message\r\n        setAppErrorMessage({\r\n          variant: \"error\",\r\n          message: `${error.response.data.error.message}`,\r\n        });\r\n      });\r\n  };\r\n  return (\r\n    <>\r\n      {token && (\r\n        <Grid container style={{ padding: 10 }}>\r\n          <Grid item xs={6} md={2}>\r\n            {/* {Playlist Component} */}\r\n            <PlaylistDialog\r\n              token={token}\r\n              checkedSongs={checkedSongs}\r\n              userID={userID}\r\n              setAppErrorMessage={setAppErrorMessage}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6} md={2}>\r\n            {/* {Button to show Sidebar} */}\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              onClick={() => setDrawerOpen(true)}\r\n            >\r\n              Show Selected\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={6} md={4}>\r\n            {searchResults.length > 0 && (\r\n              //Button to show user library\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  setSearchResults([]);\r\n                }}\r\n                style={{ marginBottom: 6 }}\r\n              >\r\n                Back to Library\r\n              </Button>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={12} md={4}>\r\n            <Grid container>\r\n              <Grid item xs={7} md={5}>\r\n                {/* {Search Text Input} */}\r\n                <TextField\r\n                  id=\"outlined-basic\"\r\n                  label=\"Search...\"\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                  onChange={(e) => setSearchQuery(e.target.value)}\r\n                  style={{ marginTop: 2 }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={5} md={7}>\r\n                {/* {Search Text Submit Button} */}\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  style={{ height: 40, margin: 2 }}\r\n                  onClick={() => searchForSong(searchQuery)}\r\n                >\r\n                  Search Song\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppActions;\r\n","import React from \"react\";\r\n\r\n//Material-ui Components\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n//Endpoint to authorize user\r\nconst authEndpoint = \"https://accounts.spotify.com/authorize\";\r\n\r\n//client ID, redirect URI and desired scopes\r\nconst clientId = \"f5200adfddfd40869e0cc7da942bb413\";\r\nconst Address = window.location.href.split(\"/\")\r\nconst redirectUri = `${Address[0]}//${Address[2]}/callback`;\r\nconst scopes = [\r\n  \"user-library-read\",\r\n  \"playlist-modify-public\",\r\n  \"playlist-modify-private\",\r\n  \"user-read-private\",\r\n  \"user-read-email\",\r\n];\r\n\r\nconst Landing = () => {\r\n  return (\r\n    <div\r\n      style={{ backgroundImage: `url(./landingImage.jpg)`, height: \"92vh\" }}\r\n      className=\"landing\"\r\n    >\r\n      <div\r\n        style={{\r\n          backgroundColor: \"rgba(50,50,50, 0.5)\",\r\n          backgroundClip: \"content-box\",\r\n        }}\r\n        className=\"landingTransparent\"\r\n      >\r\n        <div className=\"landingInfo\">\r\n          <Typography\r\n            variant=\"h1\"\r\n            gutterBottom\r\n            style={{\r\n              fontSize: \"2.75rem\",\r\n              fontWeight: \"normal\",\r\n              color: \"white\",\r\n            }}\r\n          >\r\n            Spotify Playlist Duration Tool\r\n          </Typography>\r\n          <Typography\r\n            variant=\"h2\"\r\n            component=\"h2\"\r\n            gutterBottom\r\n            style={{ fontSize: \"1.5rem\", color: \"white\", paddingBottom: \"1vh\" }}\r\n          >\r\n            Create a Spotify playlist with the overall duration you require.\r\n          </Typography>\r\n          <Typography\r\n            variant=\"h3\"\r\n            component=\"h3\"\r\n            gutterBottom\r\n            style={{ fontSize: \"1.0rem\", color: \"white\", paddingBottom: \"2vh\" }}\r\n          >\r\n            - View User Library <br />\r\n            - Search Songs <br />\r\n            - Select Songs <br />\r\n            - Save Songs to Spotify Playlist <br />\r\n          </Typography>\r\n          <Typography\r\n            variant=\"h4\"\r\n            component=\"h4\"\r\n            gutterBottom\r\n            style={{ fontSize: \"1.25rem\", color: \"white\" }}\r\n          >\r\n            Login To Spotify to Continue\r\n          </Typography>\r\n          <Button\r\n            href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\r\n              \"%20\"\r\n            )}&response_type=token&show_dialog=true`}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{\r\n              marginTop: 10,\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              height: 50,\r\n              backgroundColor: \"rgb(29, 185, 84)\",\r\n            }}\r\n          >\r\n            Login\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\n//Import method\r\nimport millisToMinutesAndSeconds from \"./helper/MilliToMinute\";\r\n\r\n//Material-ui Components\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\n\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\n\r\nconst SongCard = ({\r\n  identifier,\r\n  uri,\r\n  song,\r\n  artist,\r\n  duration,\r\n  albumCover,\r\n  checkedSongs,\r\n  setCheckedSongs,\r\n}) => {\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  //Check if Card Song is in CheckedSongs array, if so Check Card, othewise Uncheck Card\r\n  useEffect(() => {\r\n    if (checkedSongs.some((song) => song.id === identifier)) {\r\n      setChecked(true);\r\n    } else {\r\n      setChecked(false);\r\n    }\r\n  }, [checkedSongs, identifier]);\r\n\r\n  //Handles the Concatenation & Deletion of songs into CheckedSongs array\r\n  const handleChange = (checkStatus) => {\r\n    setChecked(checkStatus);\r\n\r\n    if (checkStatus) {\r\n      let songObj = {\r\n        id: identifier,\r\n        songName: song,\r\n        uri,\r\n        artist,\r\n        duration,\r\n        albumCover,\r\n      };\r\n      let concatCheckedSongs = checkedSongs.concat(songObj); //Add new Song onto Array\r\n      setCheckedSongs(concatCheckedSongs);\r\n    } else {\r\n      let checkedSongsCopy = [...checkedSongs]; //Copy Array\r\n      let removeIndex = checkedSongsCopy\r\n        .map((song) => song.id)\r\n        .indexOf(identifier); //Get index of song to remove\r\n      if (removeIndex >= 0) {\r\n        checkedSongsCopy.splice(removeIndex, 1); //Remove Song from Array\r\n      }\r\n      setCheckedSongs(checkedSongsCopy);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      item\r\n      component={Card}\r\n      xs={5}\r\n      md={2}\r\n      key={identifier}\r\n      variant=\"outlined\"\r\n      style={{ margin: \"0 1%\", marginBottom: \"1%\" }}\r\n    >\r\n      <CardActionArea onClick={() => handleChange(!checked)}>\r\n        <Checkbox\r\n          checked={checked}\r\n          onChange={() => handleChange(!checked)}\r\n          inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n        />\r\n        <CardMedia component=\"img\" image={albumCover} />\r\n        <CardContent>\r\n          <Typography variant=\"h6\">{song}</Typography>\r\n          <Typography variant=\"body2\" component=\"p\">\r\n            {artist}\r\n          </Typography>\r\n          <Typography variant=\"body2\" component=\"p\">\r\n            Duration: {millisToMinutesAndSeconds(duration)}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SongCard;\r\n","import React from \"react\";\r\n\r\n//Import Component\r\nimport SongCard from \"./SongCard\";\r\n\r\n//Material-ui Components\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst SongCards = ({\r\n  userLibrary,\r\n  checkedSongs,\r\n  setCheckedSongs,\r\n  token,\r\n  loadMoreLibrary,\r\n  searchResults,\r\n}) => {\r\n  return (\r\n    <div>\r\n      {\r\n        <Grid container spacing={0} justify=\"center\">\r\n          {/* {Display Song Cards for Search} */}\r\n          {searchResults.length > 0\r\n            ? searchResults.map((song) => (\r\n                <SongCard\r\n                  song={song.name}\r\n                  artist={song.artists[0].name}\r\n                  albumCover={song.album.images[1].url}\r\n                  duration={song.duration_ms}\r\n                  identifier={song.id}\r\n                  checkedSongs={checkedSongs}\r\n                  setCheckedSongs={setCheckedSongs}\r\n                  uri={song.uri}\r\n                  key={song.id}\r\n                />\r\n              ))\r\n            : //Display Song Cards for User Library\r\n              userLibrary.map((song) => (\r\n                <SongCard\r\n                  song={song.track.name}\r\n                  artist={song.track.artists[0].name}\r\n                  albumCover={song.track.album.images[1].url}\r\n                  duration={song.track.duration_ms}\r\n                  identifier={song.track.id}\r\n                  checkedSongs={checkedSongs}\r\n                  setCheckedSongs={setCheckedSongs}\r\n                  uri={song.track.uri}\r\n                  key={song.track.id}\r\n                />\r\n              ))}\r\n\r\n          {/* {Button to Load More Songs} */}\r\n          {!searchResults.length > 0 && token && (\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={loadMoreLibrary}\r\n            >\r\n              Load More\r\n            </Button>\r\n          )}\r\n        </Grid>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SongCards;\r\n","//Returns object with Access Token, Expires_In, & Token_Type\r\nconst hash = window.location.hash\r\n  .substring(1)\r\n  .split(\"&\")\r\n  .reduce(function (initial, item) {\r\n    if (item) {\r\n      var parts = item.split(\"=\");\r\n      initial[parts[0]] = decodeURIComponent(parts[1]);\r\n    }\r\n    return initial;\r\n  }, {});\r\n\r\nexport default hash;\r\n","import React, { useState, useEffect } from \"react\";\n\n//For API calls\nimport axios from \"axios\";\n\n//Import Components\nimport Header from \"./Components/Header\";\nimport Sidebar from \"./Components/Sidebar\";\nimport AppActions from \"./Components/AppActions\";\nimport Landing from \"./Components/Landing\";\nimport SongCards from \"./Components/SongCards\";\nimport hash from \"./Components/helper/hash\";\n\nimport \"./App.css\";\n\n//Material-ui Components\nimport Alert from \"@material-ui/lab/Alert\";\n\nfunction App() {\n  const [token, setToken] = useState(\"\");\n  const [userID, setUserID] = useState(\"\");\n  const [flag, setFlag] = useState(\"\");\n  const [userLibrary, setUserLibrary] = useState([]);\n  const [checkedSongs, setCheckedSongs] = useState([]);\n  const [loadMoreURL, setLoadMoreURL] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [appErrorMessage, setAppErrorMessage] = useState({\n    variant: \"\",\n    message: \"\",\n  });\n  const [drawerOpen, setDrawerOpen] = useState(false);\n\n  //Sets the access token and Local Storage to state\n  useEffect(() => {\n    let _token = hash.access_token;\n    if (_token) {\n      setToken(_token);\n\n      //Looks at Local Storage\n      let localStore = JSON.parse(localStorage.getItem('checkedLocalStore'))\n      if(localStore) {\n        setCheckedSongs(localStore) //If Local Storage Available set State\n      }\n    }\n  }, []);\n\n  //Update Local Storage when checked songs changes\n  useEffect(() => {\n    localStorage.setItem('checkedLocalStore', JSON.stringify(checkedSongs))\n  }, [checkedSongs])\n\n  //Retrieves the users Profile data and library\n  useEffect(() => {\n    if (token) {\n      getUserDetails();\n      getLibrary();\n    }\n  }, [token]);\n\n  //Retrieve user Profile Data - GET\n  const getUserDetails = () => {\n    axios\n      .get(\"https://api.spotify.com/v1/me\", {\n        headers: { Authorization: \"Bearer \" + token },\n      })\n      .then(({ data }) => {\n        setUserID(data.id); //Set the UserID state\n        setFlag(data.country); //Set the Flag State\n      })\n      .catch((error) => {\n        console.log(error.response); //console log error\n        //Display an error message\n        setAppErrorMessage({\n          variant: \"error\",\n          message: `${error.response.data.error.message}`,\n        });\n        setToken(\"\"); //remove token to prompt sign-in, {access token expires}\n      });\n  };\n\n  //Retrieve user library - GET\n  const getLibrary = (URL = \"https://api.spotify.com/v1/me/tracks\") => {\n    axios\n      .get(URL, { headers: { Authorization: \"Bearer \" + token } })\n      .then(({ data: { items, next } }) => {\n        setLoadMoreURL(next); //Set URL to load more songs\n\n        //Append new tracks onto Library state and set new state\n        let concatLibrary = userLibrary.concat(items);\n        setUserLibrary(concatLibrary);\n      })\n      .catch((error) => {\n        console.log(error.response); //console log error\n      });\n  };\n\n  //Retrieves new tracks\n  const loadMoreLibrary = () => {\n    getLibrary(loadMoreURL);\n  };\n\n  return (\n    <div>\n      {/* {Header Component - Displays Hamburger & Spotify Username}  */}\n      <Header\n        setDrawerOpen={setDrawerOpen}\n        checkedSongs={checkedSongs}\n        userID={userID}\n        flag={flag}\n      />\n\n      {/* {Sidebar Component - Displays Selected Songs} */}\n      <Sidebar\n        drawerOpen={drawerOpen}\n        setDrawerOpen={setDrawerOpen}\n        checkedSongs={checkedSongs}\n        setCheckedSongs={setCheckedSongs}\n      />\n\n      {/* {Actions Component - SaveToPlaylist, ShowSelected, SearchBar} */}\n      <AppActions\n        token={token}\n        checkedSongs={checkedSongs}\n        userID={userID}\n        setAppErrorMessage={setAppErrorMessage}\n        setDrawerOpen={setDrawerOpen}\n        searchResults={searchResults}\n        setSearchResults={setSearchResults}\n        searchQuery={searchQuery}\n        setSearchQuery={setSearchQuery}\n      />\n\n      {/* {Displays Error Message to Display} */}\n      {appErrorMessage.message && (\n        <Alert\n          onClose={() => setAppErrorMessage({ variant: \"\", message: \"\" })}\n          severity={appErrorMessage.variant}\n        >\n          {appErrorMessage.message}\n        </Alert>\n      )}\n\n      {/* {SongCards Component - Displays all songs in independent Cards} */}\n      <SongCards\n        userLibrary={userLibrary}\n        checkedSongs={checkedSongs}\n        setCheckedSongs={setCheckedSongs}\n        token={token}\n        loadMoreLibrary={loadMoreLibrary}\n        searchResults={searchResults}\n      />\n\n      {/* {Display Landing to Authorize Spotify} */}\n      {!token && <Landing />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}